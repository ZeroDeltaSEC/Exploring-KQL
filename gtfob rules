# GTFOBins Detection Rules for Microsoft Sentinel - Complete Guide

## Overview

GTFOBins (https://gtfobins.github.io/) is a curated list of Unix binaries that can be exploited by attackers to bypass local security restrictions. This comprehensive guide provides KQL detection rules for Microsoft Sentinel to identify potential abuse of these binaries.

## Table of Contents
1. [How to Deploy These Rules](#deployment)
2. [Detection Categories](#categories)
3. [KQL Rules](#rules)
4. [Implementation Guide](#implementation)
5. [Tuning and Customization](#tuning)
6. [Response Playbooks](#playbooks)

---

## How to Deploy These Rules {#deployment}

### Prerequisites
- Microsoft Sentinel workspace configured
- Data connectors enabled for:
  - Microsoft Defender for Endpoint
  - Linux/Unix system logs
  - Syslog connector

### Deployment Steps
1. **Navigate to Sentinel Analytics Rules**
   - Go to Microsoft Sentinel → Analytics → Rule templates
   - Click "Create" → "Scheduled query rule"

2. **Configure Each Rule**
   - Copy the KQL query from below
   - Set appropriate severity levels
   - Configure alert grouping
   - Set up automated responses

3. **Test and Validate**
   - Run queries in Log Analytics first
   - Verify data sources are working
   - Test with known safe activities

---

## Detection Categories {#categories}

| Category | Description | Risk Level |
|----------|-------------|------------|
| **Shell Spawning** | Detecting shells spawned through GTFOBins | Critical |
| **File Access** | Unauthorized file read/write operations | High |
| **Privilege Escalation** | Sudo abuse and privilege escalation | Critical |
| **Network Activity** | Suspicious network connections | Medium-High |
| **Data Exfiltration** | File uploads and data theft | High |
| **Persistence** | Maintaining access through scheduled tasks | High |
| **Library Hijacking** | LD_PRELOAD and library manipulation | High |

---

## KQL Detection Rules {#rules}

### 1. Suspicious Shell Execution via GTFOBins

**Purpose**: Detects when legitimate binaries are used to spawn shells
**MITRE ATT&CK**: T1059 (Command and Scripting Interpreter)

```kql
// RULE 1: Suspicious Shell Execution Detection
let GTFOBinsList = dynamic([
    "awk", "base64", "bash", "busybox", "cat", "chmod", "chown", "cp", "curl", 
    "cut", "date", "dd", "diff", "docker", "ed", "env", "expand", "expect", 
    "file", "find", "flock", "fmt", "fold", "ftp", "gawk", "gcc", "gdb", 
    "git", "grep", "head", "hexdump", "highlight", "iconv", "jq", "less", 
    "let", "look", "ls", "make", "man", "mawk", "more", "mv", "nano", 
    "nawk", "nc", "netcat", "nice", "nl", "nmap", "node", "od", "openssl", 
    "perl", "php", "pic", "pico", "python", "python2", "python3", "readelf", 
    "red", "rev", "rlwrap", "rsync", "ruby", "sed", "sh", "shuf", "socat", 
    "sort", "sqlite3", "ssh", "stdbuf", "strace", "strings", "tail", "tar", 
    "tclsh", "tee", "telnet", "tftp", "time", "timeout", "tmux", "tr", 
    "unexpand", "uniq", "unshare", "vi", "vim", "watch", "wget", "xargs", 
    "xxd", "zip", "zsh"
]);
DeviceProcessEvents
| where Timestamp > ago(1h)
| where FileName in~ (GTFOBinsList)
| where ProcessCommandLine contains "-c" or 
        ProcessCommandLine contains "/bin/sh" or 
        ProcessCommandLine contains "/bin/bash" or
        ProcessCommandLine contains "bash -i" or
        ProcessCommandLine contains "sh -i" or
        ProcessCommandLine matches regex @"exec\s+.*sh"
| extend Severity = "High"
| extend ThreatCategory = "Shell Spawning"
| extend MITRE_Technique = "T1059"
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, 
          InitiatingProcessFileName, Severity, ThreatCategory, MITRE_Technique
```

**Configuration**:
- **Frequency**: Every 5 minutes
- **Severity**: High
- **Alert Grouping**: By DeviceName and AccountName

---

### 2. Sensitive File Access via GTFOBins

**Purpose**: Detects access to sensitive system files
**MITRE ATT&CK**: T1005 (Data from Local System)

```kql
// RULE 2: Sensitive File Access Detection
DeviceProcessEvents
| where Timestamp > ago(1h)
| where FileName in~ (GTFOBinsList)
| where ProcessCommandLine matches regex @"(/etc/passwd|/etc/shadow|/root/|\.ssh/|id_rsa|authorized_keys|/var/log/|/proc/|/sys/)"
| extend Severity = "Critical"
| extend ThreatCategory = "File Access"
| extend MITRE_Technique = "T1005"
| extend FileType = case(
    ProcessCommandLine contains "/etc/passwd", "Password File",
    ProcessCommandLine contains "/etc/shadow", "Shadow File", 
    ProcessCommandLine contains ".ssh/", "SSH Keys",
    ProcessCommandLine contains "/var/log/", "Log Files",
    "Other Sensitive Files"
)
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, 
          FileType, Severity, ThreatCategory, MITRE_Technique
```

---

### 3. Privilege Escalation via Sudo Abuse

**Purpose**: Detects sudo abuse with GTFOBins
**MITRE ATT&CK**: T1548.003 (Sudo and Sudo Caching)

```kql
// RULE 3: Sudo Abuse Detection
DeviceProcessEvents
| where Timestamp > ago(1h)
| where ProcessCommandLine startswith "sudo"
| where ProcessCommandLine has_any (GTFOBinsList)
| where ProcessCommandLine contains "-c" or 
        ProcessCommandLine contains "!" or
        ProcessCommandLine contains "exec" or
        ProcessCommandLine matches regex @"sudo\s+\w+.*sh"
| extend Severity = "Critical"
| extend ThreatCategory = "Privilege Escalation"
| extend MITRE_Technique = "T1548.003"
| project Timestamp, DeviceName, AccountName, ProcessCommandLine, 
          ParentProcessName, Severity, ThreatCategory, MITRE_Technique
```

---

### 4. Suspicious Network Connections

**Purpose**: Detects network-based GTFOBins abuse
**MITRE ATT&CK**: T1071 (Application Layer Protocol)

```kql
// RULE 4: Suspicious Network Activity Detection
let NetworkGTFOBins = dynamic(["nc", "netcat", "socat", "telnet", "ssh", "curl", "wget", "ftp", "tftp"]);
DeviceProcessEvents
| where Timestamp > ago(1h)
| where FileName in~ (NetworkGTFOBins)
| where ProcessCommandLine matches regex @"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|:[0-9]+|-l\s+-p|--listen|-e\s|/bin/)"
| extend Severity = "Medium"
| extend ThreatCategory = "Network Activity"
| extend MITRE_Technique = "T1071"
| extend ConnectionType = case(
    ProcessCommandLine contains "-l", "Listening",
    ProcessCommandLine matches regex @"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", "Outbound Connection",
    ProcessCommandLine contains "-e", "Command Execution",
    "Other"
)
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, 
          ConnectionType, Severity, ThreatCategory, MITRE_Technique
```

---

### 5. Data Exfiltration Detection

**Purpose**: Detects potential data exfiltration via GTFOBins
**MITRE ATT&CK**: T1041 (Exfiltration Over C2 Channel)

```kql
// RULE 5: Data Exfiltration Detection
DeviceProcessEvents
| where Timestamp > ago(1h)
| where FileName in~ (dynamic(["curl", "wget", "scp", "rsync", "base64", "nc", "socat"]))
| where ProcessCommandLine contains "POST" or 
        ProcessCommandLine contains "--upload" or
        ProcessCommandLine contains "-T" or
        ProcessCommandLine matches regex @"-d\s+@" or
        ProcessCommandLine contains "--data-binary" or
        ProcessCommandLine contains "> /dev/tcp/"
| extend Severity = "High"
| extend ThreatCategory = "Data Exfiltration"
| extend MITRE_Technique = "T1041"
| extend ExfilMethod = case(
    ProcessCommandLine contains "POST", "HTTP POST",
    ProcessCommandLine contains "--upload", "File Upload",
    ProcessCommandLine contains "/dev/tcp/", "TCP Connection",
    "Other"
)
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, 
          ExfilMethod, Severity, ThreatCategory, MITRE_Technique
```

---

### 6. Reverse Shell Detection

**Purpose**: Detects reverse shell attempts
**MITRE ATT&CK**: T1059 (Command and Scripting Interpreter)

```kql
// RULE 6: Reverse Shell Detection
DeviceProcessEvents
| where Timestamp > ago(1h)
| where ProcessCommandLine matches regex @"(bash\s+-i\s+>&|sh\s+-i\s+>&|/dev/tcp/|mkfifo.*nc|python.*socket|perl.*socket)"
| extend Severity = "Critical"
| extend ThreatCategory = "Reverse Shell"
| extend MITRE_Technique = "T1059"
| extend ShellType = case(
    ProcessCommandLine contains "bash -i", "Bash Interactive",
    ProcessCommandLine contains "/dev/tcp/", "TCP Redirect",
    ProcessCommandLine contains "mkfifo", "Named Pipe",
    ProcessCommandLine contains "python.*socket", "Python Socket",
    "Other"
)
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, 
          ShellType, Severity, ThreatCategory, MITRE_Technique
```

---

### 7. Binary Execution from Non-Standard Locations

**Purpose**: Detects GTFOBins executed from unusual paths
**MITRE ATT&CK**: T1036 (Masquerading)

```kql
// RULE 7: Non-Standard Binary Location Detection
DeviceProcessEvents
| where Timestamp > ago(1h)
| where FileName in~ (GTFOBinsList)
| where FolderPath !startswith "/usr/bin/" and 
        FolderPath !startswith "/bin/" and 
        FolderPath !startswith "/usr/local/bin/" and
        FolderPath !startswith "/usr/sbin/" and
        FolderPath !startswith "/sbin/"
| extend Severity = "Medium"
| extend ThreatCategory = "Masquerading"
| extend MITRE_Technique = "T1036"
| project Timestamp, DeviceName, AccountName, FileName, FolderPath, 
          ProcessCommandLine, Severity, ThreatCategory, MITRE_Technique
```

---

### 8. Environment Variable Manipulation

**Purpose**: Detects LD_PRELOAD and other environment attacks
**MITRE ATT&CK**: T1574.006 (Dynamic Linker Hijacking)

```kql
// RULE 8: Environment Variable Manipulation Detection
DeviceProcessEvents
| where Timestamp > ago(1h)
| where ProcessCommandLine contains "LD_PRELOAD" or 
        ProcessCommandLine contains "LD_LIBRARY_PATH" or
        ProcessCommandLine contains "PATH=" and ProcessCommandLine has_any (GTFOBinsList)
| extend Severity = "High"
| extend ThreatCategory = "Library Hijacking"
| extend MITRE_Technique = "T1574.006"
| project Timestamp, DeviceName, AccountName, FileName, ProcessCommandLine, 
          Severity, ThreatCategory, MITRE_Technique
```

---

## Hunting Queries

### Query 1: GTFOBins Usage Statistics

```kql
// Analyze GTFOBins usage patterns over time
DeviceProcessEvents
| where Timestamp > ago(7d)
| where FileName in~ (GTFOBinsList)
| summarize Count = count() by FileName, bin(Timestamp, 1d)
| render timechart
```

### Query 2: User Behavior Analysis

```kql
// Identify users with unusual GTFOBins usage
DeviceProcessEvents
| where Timestamp > ago(24h)
| where FileName in~ (GTFOBinsList)
| summarize UniqueCommands = dcount(ProcessCommandLine), 
           TotalCommands = count(),
           CommandList = make_set(ProcessCommandLine, 10)
by AccountName, DeviceName
| where UniqueCommands > 5 or TotalCommands > 20
| order by TotalCommands desc
```

### Query 3: Command Chain Analysis

```kql
// Detect command chains that might indicate attack progression
DeviceProcessEvents
| where Timestamp > ago(1h)
| where FileName in~ (GTFOBinsList)
| sort by DeviceName, AccountName, Timestamp asc
| extend NextCommand = next(ProcessCommandLine),
         NextTime = next(Timestamp),
         TimeDiff = datetime_diff('second', next(Timestamp), Timestamp)
| where TimeDiff between (1 .. 60)  // Commands within 1 minute
| project Timestamp, DeviceName, AccountName, ProcessCommandLine, NextCommand, TimeDiff
```

---

## Implementation Guide {#implementation}

### Step 1: Data Source Configuration

Ensure these data sources are configured:

1. **Microsoft Defender for Endpoint**
   ```
   - Enable DeviceProcessEvents collection
   - Configure Linux device onboarding
   - Verify event forwarding
   ```

2. **Syslog Connector**
   ```
   - Configure rsyslog/syslog-ng forwarding
   - Enable auth.log and secure log collection
   - Set up CEF parsing if needed
   ```

### Step 2: Rule Deployment

For each rule:

1. **Create Analytics Rule**
   - Rule name: Use descriptive names (e.g., "GTFOBins - Suspicious Shell Execution")
   - Description: Include MITRE ATT&CK technique
   - Severity: As specified in each rule

2. **Set Query Parameters**
   - Query frequency: 5-15 minutes
   - Lookup period: 1 hour (adjust based on environment)
   - Alert threshold: Greater than 0

3. **Configure Alert Grouping**
   - Group by: DeviceName, AccountName
   - Reopen closed incidents: Enable
   - Alert details: Include all projected fields

### Step 3: Alert Actions

Configure automated responses:

1. **Immediate Actions**
   - Send email to SOC team
   - Create ServiceNow ticket
   - Post to Teams/Slack channel

2. **Investigation Playbooks**
   - Gather additional host information
   - Check user activity timeline
   - Analyze network connections

---

## Tuning and Customization {#tuning}

### Reducing False Positives

1. **Whitelist Legitimate Use Cases**
   ```kql
   // Add exclusions for known good activities
   | where AccountName !in ("backup_user", "monitoring_service")
   | where InitiatingProcessFileName != "deployment_script.sh"
   ```

2. **Time-based Filtering**
   ```kql
   // Exclude business hours for certain activities
   | extend Hour = datetime_part("hour", Timestamp)
   | where Hour !between (9 .. 17)  // Outside business hours
   ```

3. **Baseline Normal Behavior**
   ```kql
   // Create baseline of normal GTFOBins usage
   let Baseline = DeviceProcessEvents
   | where Timestamp between (ago(30d) .. ago(7d))
   | where FileName in~ (GTFOBinsList)
   | summarize NormalCount = count() by AccountName, FileName
   | where NormalCount > 10;  // Regular users
   ```

### Environment-Specific Customizations

1. **Add Custom Binaries**
   ```kql
   let CustomGTFOBins = dynamic(["custom_tool", "internal_script"]);
   let ExtendedGTFOBinsList = array_concat(GTFOBinsList, CustomGTFOBins);
   ```

2. **Adjust Sensitivity Levels**
   - Development environments: Lower sensitivity
   - Production environments: Higher sensitivity
   - Critical servers: Maximum sensitivity

---

## Response Playbooks {#playbooks}

### Incident Response Workflow

1. **Initial Triage (0-15 minutes)**
   - Validate the alert is not a false positive
   - Check if the user/system is known
   - Determine if the activity is authorized

2. **Investigation (15-60 minutes)**
   - Run hunting queries to find related activity
   - Check network connections and file access
   - Interview user if necessary

3. **Containment (As needed)**
   - Disable user account if compromised
   - Isolate affected systems
   - Block suspicious network connections

4. **Documentation**
   - Record all investigation steps
   - Update detection rules based on findings
   - Share IOCs with threat intelligence team

### Sample Investigation Queries

```kql
// Get full timeline for affected user
let SuspiciousUser = "username";
let SuspiciousDevice = "hostname";
DeviceProcessEvents
| where Timestamp > ago(24h)
| where AccountName == SuspiciousUser and DeviceName == SuspiciousDevice
| order by Timestamp asc
| project Timestamp, FileName, ProcessCommandLine, ParentProcessName
```

```kql
// Check for persistence mechanisms
DeviceProcessEvents
| where Timestamp > ago(24h)
| where ProcessCommandLine contains "cron" or ProcessCommandLine contains "systemd"
| where AccountName == SuspiciousUser
```

---

## Monitoring and Maintenance

### Regular Tasks

1. **Weekly Reviews**
   - Analyze false positive rates
   - Review new GTFOBins additions
   - Update binary lists

2. **Monthly Updates**
   - Tune detection rules based on feedback
   - Add new MITRE ATT&CK mappings
   - Update response playbooks

3. **Quarterly Assessments**
   - Test detection coverage
   - Validate alert workflows
   - Train SOC analysts on new techniques

### Performance Optimization

```kql
// Monitor query performance
search *
| where TimeGenerated > ago(1h)
| where Type == "AzureDiagnostics"
| where Category == "QueryRuntimeStatistics"
| where OperationName == "Query"
| project TimeGenerated, DurationMs, ResultCount
| where DurationMs > 30000  // Queries taking longer than 30 seconds
```

---

## Conclusion

These GTFOBins detection rules provide comprehensive coverage for identifying potential abuse of legitimate Unix binaries. Regular tuning and maintenance are essential for maintaining detection effectiveness while minimizing false positives.

For additional support or customization requests, consult with your security team or Microsoft Sentinel support resources.