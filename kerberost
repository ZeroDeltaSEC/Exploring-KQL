Aceste KQL-uri te vor ajuta să identifici sursele reale ale alertelor și să documentezi false positive-urile:

Pentru cazul cu Excel:Query-urile 1, 3, 4 identifică când Excel accesează resurse de rețeaQuery-ul 6 detectează macro-uri sau script-uri care ar putea cauza tentativeleQuery-ul 8 identifică conexiunile către SharePoint/OneDrivePentru investigația completă:

Query-ul 5 îți arată toată activitatea unui user în jurul timpului alerteiQuery-ul 10 oferă o vedere completă asupra unei stații de lucruQuery-ul 7 identifică pattern-uri automate (procese programate)Cum să le folosești:Înlocuiește variabilele marcate (USERNAME_HERE, TARGET_ACCOUNT, etc.)Ajustează intervalele de timp după nevoieCorelează rezultatele cu alertele originaleAceste query-uri te vor ajuta să demonstrezi că tentativele vin din aplicații legitime, nu din atacuri reale.

// 1. Identificarea proceselor care inițiază conexiunile (cu Excel, Word, etc.)
DeviceProcessEvents
| where TimeGenerated > ago(2h)
| where ProcessCommandLine has_any ("excel.exe", "winword.exe", "powerpnt.exe", "outlook.exe")
| join kind=inner (
    DeviceNetworkEvents
    | where TimeGenerated > ago(2h)
    | where RemotePort in (445, 139, 135, 389, 636, 88)  // SMB, LDAP, Kerberos ports
) on DeviceId, $left.ProcessId == $right.InitiatingProcessId
| project TimeGenerated, DeviceName, AccountName, ProcessCommandLine, RemoteIP, RemotePort, InitiatingProcessFileName
| sort by TimeGenerated desc

// 2. Corelarea erorilor de autentificare cu procesele active pe device
let FailedAuth = SecurityEvent
| where TimeGenerated > ago(1h)
| where EventID == 4625
| project TimeGenerated, Account, IpAddress, WorkstationName;
DeviceProcessEvents
| where TimeGenerated > ago(1h)
| where DeviceName in ((FailedAuth | distinct WorkstationName))
| summarize ProcessList = make_set(FileName), CommandLines = make_set(ProcessCommandLine) 
  by DeviceName, bin(TimeGenerated, 10m)
| join kind=inner FailedAuth on $left.DeviceName == $right.WorkstationName
| project TimeGenerated, DeviceName, Account, ProcessList, CommandLines
| sort by TimeGenerated desc

// 3. Identificarea aplicațiilor Office care accesează resurse de rețea
DeviceFileEvents
| where TimeGenerated > ago(2h)
| where InitiatingProcessFileName has_any ("excel.exe", "winword.exe", "powerpnt.exe")
| where FolderPath startswith "\\\\"  // UNC paths
| summarize FileAccesses = count(), UniqueFiles = dcount(FolderPath) 
  by DeviceName, AccountName, InitiatingProcessFileName, bin(TimeGenerated, 15m)
| where FileAccesses >= 5
| sort by FileAccesses desc

// 4. Analiza conexiunilor de rețea inițiate de aplicații Office
DeviceNetworkEvents
| where TimeGenerated > ago(2h)
| where InitiatingProcessFileName has_any ("excel.exe", "winword.exe", "powerpnt.exe", "outlook.exe")
| summarize Connections = count(), UniqueRemoteIPs = dcount(RemoteIP) 
  by DeviceName, AccountName, InitiatingProcessFileName, RemoteIP, RemotePort, bin(TimeGenerated, 10m)
| sort by Connections desc

// 5. Urmărirea activității unui user specific în timpul alertei
let TargetUser = "USERNAME_HERE";  // Înlocuiește cu user-ul investigat
let AlertTime = datetime("2024-XX-XX XX:XX:XX");  // Înlocuiește cu timpul alertei
DeviceLogonEvents
| where TimeGenerated between ((AlertTime - 30m) .. (AlertTime + 30m))
| where AccountName == TargetUser
| union (
    DeviceProcessEvents
    | where TimeGenerated between ((AlertTime - 30m) .. (AlertTime + 30m))
    | where AccountName == TargetUser
)
| union (
    DeviceFileEvents
    | where TimeGenerated between ((AlertTime - 30m) .. (AlertTime + 30m))
    | where AccountName == TargetUser
)
| sort by TimeGenerated asc

// 6. Detectarea macro-urilor sau script-urilor în documente Office
DeviceProcessEvents
| where TimeGenerated > ago(2h)
| where ParentProcessName has_any ("excel.exe", "winword.exe", "powerpnt.exe")
| where ProcessCommandLine has_any ("powershell", "cmd", "wscript", "cscript")
| project TimeGenerated, DeviceName, AccountName, ParentProcessName, ProcessCommandLine, FileName
| sort by TimeGenerated desc

// 7. Analiza pattern-urilor de timp pentru identificarea proceselor automate
SecurityEvent
| where TimeGenerated > ago(24h)
| where EventID == 4625
| where Account == "TARGET_ACCOUNT"  // Înlocuiește cu contul investigat
| extend Hour = datetime_part("hour", TimeGenerated)
| extend Minute = datetime_part("minute", TimeGenerated)
| summarize Attempts = count() by Hour, Minute
| sort by Hour, Minute
| evaluate series_stats_dynamic(Attempts)  // Pentru a identifica pattern-uri regulate

// 8. Identificarea conexiunilor către SharePoint/OneDrive din aplicații Office
DeviceNetworkEvents
| where TimeGenerated > ago(2h)
| where InitiatingProcessFileName has_any ("excel.exe", "winword.exe", "powerpnt.exe")
| where RemoteUrl has_any ("sharepoint.com", "onedrive.com", ".sharepoint.") 
    or RemoteIP in (range(40.96.0.0, 40.127.255.255))  // Microsoft IP ranges
| project TimeGenerated, DeviceName, AccountName, InitiatingProcessFileName, RemoteUrl, RemoteIP
| sort by TimeGenerated desc

// 9. Corelarea cu evenimente de registry pentru aplicații Office
DeviceRegistryEvents
| where TimeGenerated > ago(2h)
| where InitiatingProcessFileName has_any ("excel.exe", "winword.exe", "powerpnt.exe")
| where RegistryKey has_any ("Credentials", "Password", "Auth")
| project TimeGenerated, DeviceName, AccountName, InitiatingProcessFileName, RegistryKey, RegistryValueName
| sort by TimeGenerated desc

// 10. Analiza completă pentru o anumită stație de lucru în timpul alertei
let TargetWorkstation = "WORKSTATION_NAME";  // Înlocuiește cu numele stației
let StartTime = ago(1h);
let EndTime = now();
// Procese
DeviceProcessEvents
| where TimeGenerated between (StartTime .. EndTime)
| where DeviceName == TargetWorkstation
| project TimeGenerated, ActionType, FileName, ProcessCommandLine, AccountName
| union (
    // Conexiuni de rețea
    DeviceNetworkEvents
    | where TimeGenerated between (StartTime .. EndTime)
    | where DeviceName == TargetWorkstation
    | project TimeGenerated, ActionType = "NetworkConnection", FileName = InitiatingProcessFileName, 
      ProcessCommandLine = strcat("RemoteIP: ", RemoteIP, " Port: ", RemotePort), AccountName
)
| union (
    // Accesări de fișiere
    DeviceFileEvents
    | where TimeGenerated between (StartTime .. EndTime)
    | where DeviceName == TargetWorkstation
    | project TimeGenerated, ActionType, FileName = InitiatingProcessFileName, 
      ProcessCommandLine = FolderPath, AccountName
)
| sort by TimeGenerated asc


xxxxxxx



1) Găsește alertele „Suspected brute-force …” și dovada (proces, device, user)

let lookback = 3d;
let bruteTitles = dynamic([
  "Suspected brute-force attack (Kerberos)",
  "Suspected brute-force attack (NTLM)"
]);
AlertInfo
| where Timestamp >= ago(lookback)
| where Title in~ (bruteTitles)
| join kind=inner AlertEvidence on AlertId
| project Timestamp, AlertId, Title,
          AccountUpn, AccountSid,
          DeviceName, DeviceId,
          FileName, FolderPath, ProcessCommandLine,
          InitiatingProcessFileName, InitiatingProcessFolderPath, InitiatingProcessCommandLine,
          RemoteUrl, RemoteIP, RemotePort, EvidenceRole
| extend IsExcel = iif(FileName =~ "EXCEL.EXE" or InitiatingProcessFileName =~ "EXCEL.EXE", true, false)
| order by Timestamp desc

Ce obții: pentru fiecare alertă – mașina, contul, procesul implicat (inclusiv dacă este EXCEL.EXE), IP/port destinație, cmdline. Bifat ✅ pentru documentare.


---

2) Arată „lanțul de procese” (dacă Excel e inițiatorul)

// setează aici ID-ul alertei dacă vrei să pornești de la o alertă anume
let targetAlertId = "";
let pivots =
    iif(isempty(targetAlertId),
        (AlertEvidence | where Timestamp >= ago(3d) and FileName =~ "EXCEL.EXE" or InitiatingProcessFileName =~ "EXCEL.EXE"),
        (AlertEvidence | where AlertId == targetAlertId));
pivots
| where isnotempty(DeviceId)
| project DeviceId, DeviceName, PivotTime=Timestamp, Pid=tolong(ProcessId), 
         FileName, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine
| join kind=leftouter (
    DeviceProcessEvents
    | where Timestamp >= ago(7d)
    | project DeviceId, Timestamp, FileName, FolderPath, ProcessId, ProcessCommandLine,
              InitiatingProcessFileName, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessCommandLine
) on DeviceId
| where Timestamp between (PivotTime-30m .. PivotTime+30m)
| where ProcessId == Pid or InitiatingProcessId == Pid
| project Timestamp, DeviceName,
          Child=FileName, ChildCmd=ProcessCommandLine,
          Parent=InitiatingProcessFileName, ParentCmd=InitiatingProcessCommandLine
| order by Timestamp asc

Ce obții: un mini-arbore: EXCEL.EXE → (addin/macro) → orice alt proces lansat. Excel + macro/COM add-in care face re-autentificări devine vizibil imediat.


---

3) Corelează EXCEL cu eșecuri de autentificare (Kerberos/NTLM) pe același device

let windowMins = 15;
DeviceProcessEvents
| where Timestamp >= ago(3d)
| where FileName =~ "EXCEL.EXE" or InitiatingProcessFileName =~ "EXCEL.EXE"
| project DeviceId, DeviceName, AccountUpn, ExcelTime = Timestamp
| join kind=inner (
    IdentityLogonEvents
    | where Timestamp >= ago(3d)
    | where ActionType == "LogonFailed" and LogonProtocol in ("Kerberos","NTLM")
    | project DeviceId, AccountUpn, FailTime=Timestamp, LogonProtocol, FailureReason
) on DeviceId, AccountUpn
| where FailTime between (ExcelTime - totimespan(windowMins*1m) .. ExcelTime + totimespan(windowMins*1m))
| summarize Fails=count(), prots=make_set(LogonProtocol), reasons=make_set(FailureReason)
          by DeviceName, AccountUpn, bin(ExcelTime, 5m)
| where Fails > 5
| order by Fails desc

Ce obții: un „timeline” care arată că la ~același timp cu rulatul Excel apar multe LogonFailed – exact ce îți trebuie ca să argumentezi FP-ul.


---

4) Vezi conexiunile rețea făcute de EXCEL către DC (Kerberos/NTLM)

let authPorts = dynamic([88, 464, 445, 139, 389, 636]); // Kerberos/NTLM/LDAP/SMB
DeviceProcessEvents
| where Timestamp >= ago(3d)
| where FileName =~ "EXCEL.EXE" or InitiatingProcessFileName =~ "EXCEL.EXE"
| project DeviceId, DeviceName, AccountUpn, PTime=Timestamp
| join kind=inner (
    DeviceNetworkEvents
    | where Timestamp >= ago(3d)
    | where RemotePort in (authPorts)
    | project DeviceId, NwTime=Timestamp, RemoteIP, RemotePort, InitiatingProcessFileName, InitiatingProcessCommandLine
) on DeviceId
| where NwTime between (PTime-10m .. PTime+10m)
| summarize connections=count(), sampleIPs=make_set(RemoteIP, 5), ports=make_set(RemotePort)
          by DeviceName, AccountUpn, bin(PTime, 5m)
| where connections > 3
| order by connections desc

Ce obții: dovezi că Excel a inițiat trafic către DC/SMB/LDAP în fereastra în care apar eșecurile.


---

5) (Opțional) Varianta pentru Microsoft Sentinel (din SecurityEvent)

> utilă dacă nu ai telemetry de proces de la Defender pe endpoint



// Kerberos (4768 eșuat) + IP sursă + corelare cu 4625 (NTLM) pe același host
let kerbFails = SecurityEvent
  | where EventID == 4768 and ResultCode != "0x0"
  | project TimeGenerated, Computer, TargetUserName, IpAddress;
let ntlmFails = SecurityEvent
  | where EventID == 4625 and LogonType == 3
  | project TimeGenerated, Computer, TargetUserName, IpAddress;
kerbFails
| join kind=fullouter (ntlmFails) on Computer, TargetUserName, IpAddress
| extend T = coalesce(TimeGenerated, TimeGenerated1)
| summarize Fails=count() by Computer, TargetUserName, IpAddress, bin(T, 5m)
| where Fails > 20
| order by Fails desc


xxxxx
xxxxx


// === PASUL 1: Obținerea detaliilor complete ale alertei ===
SecurityAlert
| where SystemAlertId == "12345690"
| extend AlertDetails = parse_json(Entities)
| project TimeGenerated, AlertName, AlertSeverity, Description, AlertDetails, 
          StartTime, EndTime, CompromisedEntity, ExtendedProperties

// === PASUL 2: Timeline-ul complet pentru user "vasilica" în ziua alertei ===
let AlertInfo = SecurityAlert | where SystemAlertId == "12345690" | project StartTime, EndTime;
let TimeWindow = AlertInfo | extend Start = StartTime - 2h, End = EndTime + 1h;
let StartInvestigation = toscalar(TimeWindow | project Start);
let EndInvestigation = toscalar(TimeWindow | project End);

// Toate activitățile user-ului
DeviceLogonEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where AccountName =~ "vasilica" or AccountDomain contains "vasilica"
| project TimeGenerated, ActionType, DeviceName, AccountName, LogonType, RemoteIP, 
          IsLocalAdmin, LogonId, Activity = "Logon"
| union (
    DeviceProcessEvents
    | where TimeGenerated between (StartInvestigation .. EndInvestigation)
    | where AccountName =~ "vasilica"
    | project TimeGenerated, ActionType, DeviceName, AccountName, 
              LogonType = "", RemoteIP = "", IsLocalAdmin = "", LogonId = "", 
              Activity = strcat("Process: ", FileName, " | ", ProcessCommandLine)
)
| union (
    SecurityEvent
    | where TimeGenerated between (StartInvestigation .. EndInvestigation)
    | where Account has "vasilica" or TargetUserName has "vasilica"
    | project TimeGenerated, ActionType = strcat("EventID: ", EventID), 
              DeviceName = Computer, AccountName = coalesce(Account, TargetUserName),
              LogonType = "", RemoteIP = IpAddress, IsLocalAdmin = "", LogonId = "", 
              Activity = strcat("Security Event: ", Activity)
)
| sort by TimeGenerated asc

// === PASUL 3: Analiza completă device "chacha124" ===
// Toate procesele de pe device în perioada alertei
DeviceProcessEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where DeviceName =~ "chacha124"
| project TimeGenerated, AccountName, FileName, ProcessCommandLine, 
          ParentProcessName, MD5, SHA1, ProcessId
| sort by TimeGenerated asc

// === PASUL 4: Conexiunile de rețea suspicious de pe device ===
DeviceNetworkEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where DeviceName =~ "chacha124"
| summarize Connections = count(), 
            FirstSeen = min(TimeGenerated), 
            LastSeen = max(TimeGenerated),
            Protocols = make_set(Protocol),
            Ports = make_set(RemotePort),
            ProcessesUsed = make_set(InitiatingProcessFileName)
    by RemoteIP, AccountName
| sort by Connections desc

// === PASUL 5: Căutarea aplicațiilor Office și activitatea lor ===
DeviceProcessEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where DeviceName =~ "chacha124"
| where FileName has_any ("excel.exe", "winword.exe", "powerpnt.exe", "outlook.exe", "teams.exe")
| join kind=leftouter (
    DeviceNetworkEvents
    | where TimeGenerated between (StartInvestigation .. EndInvestigation)
    | where DeviceName =~ "chacha124"
) on $left.ProcessId == $right.InitiatingProcessId
| project TimeGenerated, AccountName, OfficeApp = FileName, ProcessCommandLine, 
          RemoteIP, RemotePort, RemoteUrl
| sort by TimeGenerated asc

// === PASUL 6: Failed logon events corelate cu timeline-ul ===
SecurityEvent
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where EventID in (4625, 4624, 4648)  // Failed, Success, Logon with explicit creds
| where Computer =~ "chacha124" or Account has "vasilica" or TargetUserName has "vasilica"
| project TimeGenerated, EventID, Computer, Account, TargetUserName, 
          LogonType, IpAddress, LogonProcessName, AuthenticationPackageName
| sort by TimeGenerated asc

// === PASUL 7: Identificarea pattern-urilor automate ===
// Verifică dacă sunt pattern-uri regulate (task-uri programate, etc.)
SecurityEvent
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where EventID == 4625
| where Computer =~ "chacha124" or Account has "vasilica"
| extend Hour = datetime_part("hour", TimeGenerated),
         Minute = datetime_part("minute", TimeGenerated),
         Second = datetime_part("second", TimeGenerated)
| summarize Attempts = count() by Hour, Minute
| sort by Hour, Minute

// === PASUL 8: Registry și File Access pentru aplicații Office ===
DeviceFileEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where DeviceName =~ "chacha124"
| where AccountName =~ "vasilica"
| where InitiatingProcessFileName has_any ("excel.exe", "winword.exe", "powerpnt.exe")
| where ActionType in ("FileCreated", "FileModified", "FileDeleted")
| project TimeGenerated, InitiatingProcessFileName, ActionType, FileName, FolderPath
| sort by TimeGenerated asc

// === PASUL 9: Corelarea cu Threat Intelligence ===
let SuspiciousIPs = DeviceNetworkEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where DeviceName =~ "chacha124"
| distinct RemoteIP;
ThreatIntelligenceIndicator
| where TimeGenerated > ago(30d)
| where NetworkIP in (SuspiciousIPs)
| project NetworkIP, ThreatType, Description, Confidence, Tags

// === PASUL 10: Analiza macro-urilor și script-urilor ===
DeviceProcessEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where DeviceName =~ "chacha124"
| where ParentProcessName has_any ("excel.exe", "winword.exe", "powerpnt.exe")
| where FileName has_any ("powershell.exe", "cmd.exe", "wscript.exe", "cscript.exe", "mshta.exe")
| project TimeGenerated, ParentProcessName, FileName, ProcessCommandLine, AccountName
| sort by TimeGenerated asc

// === PASUL 11: Summary pentru documentarea cazului ===
// Rezumat final pentru raport
print "=== REZUMAT INVESTIGAȚIE ==="
| union (
    SecurityAlert
    | where SystemAlertId == "12345690"
    | project Info = strcat("ALERT: ", AlertName, " | Severity: ", AlertSeverity, " | Time: ", TimeGenerated)
)
| union (
    DeviceProcessEvents
    | where TimeGenerated between (StartInvestigation .. EndInvestigation)
    | where DeviceName =~ "chacha124" and AccountName =~ "vasilica"
    | where FileName has_any ("excel.exe", "winword.exe", "powerpnt.exe")
    | summarize OfficeProcesses = count(), FirstOfficeActivity = min(TimeGenerated), LastOfficeActivity = max(TimeGenerated)
    | project Info = strcat("OFFICE APPS: ", OfficeProcesses, " processes between ", FirstOfficeActivity, " - ", LastOfficeActivity)
)
| union (
    SecurityEvent
    | where TimeGenerated between (StartInvestigation .. EndInvestigation)
    | where EventID == 4625 and (Computer =~ "chacha124" or Account has "vasilica")
    | summarize FailedLogons = count(), FirstFail = min(TimeGenerated), LastFail = max(TimeGenerated)
    | project Info = strcat("FAILED LOGONS: ", FailedLogons, " attempts between ", FirstFail, " - ", LastFail)
)

// === PASUL 12: Căutarea în alte device-uri pentru user "vasilica" ===
DeviceLogonEvents
| where TimeGenerated between (StartInvestigation .. EndInvestigation)
| where AccountName =~ "vasilica"
| where DeviceName != "chacha124"  // Alte device-uri
| summarize LogonCount = count(), Devices = make_set(DeviceName) by AccountName
| project AccountName, LogonCount, OtherDevices = Devices