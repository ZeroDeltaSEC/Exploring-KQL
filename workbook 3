📚 Contents
Before You Start: Accounts, Permissions, and Terminology

One-Time Environment Preparation

Your First Workbook: “Hello World” Exercise (5 min)

Building the Advanced User Investigation Workbook
4.1 Create Global Parameters
4.2 Section 1 – User Search & Selection
4.3 Section 2 – User Profile & Overview
4.4 Section 3 – Device & Location Analysis
4.5 Section 4 – Security Alerts & Incidents
4.6 Section 5 – Risk Scoring & Analytics
4.7 Section 6 – Timeline & Behavioural Analysis
4.8 Section 7 – Geo-Location Intelligence
4.9 Section 8 – Executive Summary & Export

Visualisation Tips (Maps, Timelines, Heat-maps)

Publishing, Sharing, and Version Control

Automation & Alerting (Scheduled rules + Logic Apps)

Performance-Tuning & Troubleshooting

Frequently Asked Questions

Further Learning Path

1 Before You Start
What you need	Why you need it
Azure subscription with at least Contributor on the resource group	Creates resources such as Log Analytics workspace
Microsoft Sentinel enabled on the workspace	Adds SIEM/SOAR capabilities
Permissions: Sentinel Reader (view) or Sentinel Responder (edit)	Controls who can build/modify workbooks
Edge/Chrome browser, pop-ups allowed for Azure Portal	Workbook editor opens blades in new panes

Navigation note (2025) – Sentinel now opens either in the classic Azure portal or inside the unified Microsoft Defender portal.
Path in Defender portal: Microsoft Defender portal ▶️ ☰ Navigation menu ▶️ Microsoft Sentinel ▶️ Threat Management ▶️ Workbooks. 
Microsoft Learn

Key terms
Term	Meaning
Workbook	Interactive dashboard built with KQL results + visuals
Parameter	Re-usable filter (time picker, dropdown, text box)
KQL	Kusto Query Language – SQL-like syntax used across Azure Monitor and Sentinel
Workspace	Log Analytics data store that Sentinel sits on top of
Data connector	Wizard that on-boards logs such as Azure AD Signin, SecurityEvents, Office365

2 One-Time Environment Preparation
Open portal and switch to the Subscription + Resource Group where Sentinel will live.

Create / locate Log Analytics workspace (LA).

In Microsoft Sentinel ▶ Settings ▶ Data Connectors, connect at minimum:

Azure AD Signin Logs

Security Events (Windows)

Office 365

Azure Activity

Verify data flow (one-click query):

kql
Copy
Edit
union withsource = TableName *
| where TimeGenerated > ago(1d)
| summarize Events = count() by TableName
| sort by Events desc
You should see non-zero counts for every required table.

3 First Workbook : “Hello World” (5 minutes)
Doing a quick practice workbook ensures the portal, permissions, and KQL engine all work.

Action	Detail
1. In Workbooks, click ➕ Add Workbook.	You’ll land in Edit mode automatically.
2. Click Add ▶ Text → type Hello World.	This proves you can save markdown.
3. Click Save → name it Hello World → OK.	You just published a workbook!

Delete it afterwards (… ▶ Delete) if you like.

4 Building the Advanced User Investigation Workbook
Pro tip – Keep two browser tabs open: one in Edit mode, one in View mode, and refresh the View tab after each big change.

4.1 Create Global Parameters
In the blank workbook choose Edit.

Add ▶ Add Parameters (top of blade).

Configure three parameters:

Name	Type	Label	Default	Additional settings
UserSearchParameter	Text	🔍 Search User	(blank)	Turn on case-insensitive
TimeRangeParameter	Time range	📅 Time Range	Last 30 days	Enable Fractions of hours
DeviceParameter	Dropdown	🖥️ Select Device	(All)	“Get data dynamically from query” (leave blank for now)

Click Apply changes after each parameter.

4.2 Section 1 – User Search & Selection
Add ▶ Add query.

Paste the User Search KQL from your original guide.

Under Visualization, choose Table.

At the bottom tick Allow column click actions → pick UserPrincipalName → Create new parameter → name it SelectedUserParameter.

Done Editing → now type part of a user’s UPN in the text box → Run; the table appears, rows are clickable.

What just happened?
You created a dynamic drill-through: selecting a row populates SelectedUserParameter, which the rest of the workbook can read.

4.3 Section 2 – User Profile & Overview
Add query below Section 1.

Paste the Detailed user profile KQL.

Choose Tiles (recommended for KPI cards).

In Tile settings:

Field: TotalSignIns → Tile size L → Colour Automatic.

Add more tiles: FailedSignIns, RiskScore, ActiveDays.

Explain every KQL line to yourself:

Line fragment	Meaning
extend GeoInfo = parse_json(LocationDetails)	JSON column split into usable fields
summarize … by UserPrincipalName	Aggregates one row per user
extend SuccessRate = round((Successful*100.)/Total,2)	maths calc – always cast to float

(Spend time here; understanding this block lets you debug any later errors.)

4.4 Section 3 – Device & Location Analysis
Create a Table visual from the given query.

Click Advanced Settings → Column Formatting:

Status → choose Conditional → Success = green ✅, Failure = red ❌.

RiskIcon – keep as text; icons display in the table cell.

4.5 Section 4 – Security Alerts & Incidents
Because alert volumes explode, always filter early:

kql
Copy
Edit
SecurityAlert
| where TimeGenerated between (TimeRange)
| where Entities has SelectedUser
Add the icons (SeverityIcon, StatusIcon) as separate columns for colour-at-a-glance.

4.6 Section 5 – Risk Scoring & Analytics
Tip for beginners: copy the query into Log Analytics first, run it, and confirm results; then paste into workbook. Common pitfalls:

Scalar vs. record – The BaselineData variable returns a record; you must wrap with toscalar() if you intend to use it as a row.

Date maths – datetime_diff('day', …) returns positive when the first argument is later. Swap order if you want elapsed days.

4.7 Section 6 – Timeline & Behavioural Analysis
Choose visual:

Table if you want click-through.

Line chart if you prefer a visual timeline (set Split by ImpossibleTravel).

Enable Drill-down so clicking a day opens the underlying records.

4.8 Section 7 – Geo-Location Intelligence
In Visualization drop-down pick Map.

Latitude field → SampleLatitude; Longitude field → SampleLongitude.

Size → LoginCount; Colour → RiskEvents.

Turn on Legend (bottom) and Full screen toggle.

💡 Got no map tiles? Check browser pop-up blocker and that you allowed the Azure Maps domain.

4.9 Section 8 – Executive Summary & Export
Add a Text part with a short markdown summary and add an Export button:

@export to='CSV' query='Section 1' filename='UserInvestigation.csv'

Now analysts can snapshot evidence.

5 Visualisation Tips
Use-case	Recommended visual	Key portal options
Countries vs. login count	Map	Bubble = LoginCount, Colour = RiskEvents
Hour x Day heat-map	Heatmap	Aggregation = Average RiskScore
Trend lines for RiskScore	Line chart	Split by Country (shows separate lines)

🆕 The workbook editor received a facelift in January 2025: icons moved to the right-hand collapse bar, and the “Apply” button was renamed “Run”. 
Microsoft Learn

6 Publishing, Sharing & Version Control
Click Save → give the workbook a clear name and Category (e.g. User Investigation).

Click Pin to dashboard if you want a tile on your Azure home page.

Export as an ARM template (… ▶ Export) and store under source control; GitHub Actions or Azure DevOps can deploy to other tenants.

Use Microsoft Sentinel ▶ Content hub to package the workbook as part of a Solution. 
Microsoft Learn

7 Automation & Alerting
Analytics ▶ ➕ Create rule ▶ Scheduled.

Paste the SuspiciousActivity query.

Set frequency to 15 minutes and Lookup period to 60 minutes.

Set Alert severity dynamically: use High when HighRiskLogins > 0, otherwise Medium.

Automated response: attach a Logic App that sends Teams message and (optionally) triggers an Entra ID access review.

8 Performance-Tuning & Troubleshooting
Symptom	Likely cause	Quick fix
Query time-outs	No early where TimeGenerated filter	Add one, then re-run
Blank visuals	Parameter null / wrong data type	Inspect parameter value with print '{SelectedUserParameter}'
Old threat-intel tables missing	You migrated to new ThreatIntelIndicators / ThreatIntelObjects schema	Replace ThreatIntelligenceIndicator everywhere before 31 July 2025 
Microsoft Learn

9 Frequently Asked Questions
Question	Answer
Can I edit a workbook someone else saved?	Yes, if you have Sentinel Responder or higher on the workspace.
Can non-Sentinel users see the workbook?	Grant them Log Analytics Reader at minimum and share the workbook URL.
Why do icons show as squares?	Your browser’s default font lacks emoji. Install Segoe UI Emoji or use PNG icons.

10 Further Learning Path
KQL 101 → 401 – Official KQL interactive lab (aka.ms/kqllab).

Microsoft Sentinel Ninja Training – Free structured course with certificates.

Community GitHub repo – Hundreds of workbook samples to dissect.

Power BI for Sentinel – Export workbook queries into Power BI for executive dashboards. 
Microsoft Learn

🎯 You are now ready!
Build the workbook slowly, test each section, and commit the JSON to version control after every milestone. In a single afternoon you’ll have a production-ready, drill-down investigation surface that cuts investigation time from hours to minutes—while remaining understandable even to colleagues who have never touched KQL before. Have fun and stay secure!




# Microsoft Sentinel - Advanced User Investigation Workbook
## Complete Guide for Beginners and Experts

### 📋 Table of Contents
1. [Introduction and Concepts](#introduction)
2. [Environment Setup](#environment-setup)
3. [Workbook Structure](#workbook-structure)
4. [Step-by-Step Implementation](#implementation)
5. [Advanced KQL Queries](#advanced-queries)
6. [Visualizations and Dashboards](#visualizations)
7. [Automation and Alerting](#automation)
8. [Best Practices and Troubleshooting](#best-practices)

---

## 🚀 Introduction and Concepts {#introduction}

### What is this Workbook?
A complex workbook for user behavior investigation that enables:
- **Rapid search** of users or devices
- **Complete analysis** of activity and locations
- **Correlation** with security alerts
- **Real-time risk scoring**
- **Visual timeline** of events

### Benefits:
- ⚡ Faster investigations (from hours to minutes)
- 🎯 Precise threat detection
- 📊 Interactive and intuitive visualizations
- 🔄 Automation of repetitive processes

---

## ⚙️ Environment Setup {#environment-setup}

### 1. Prerequisites
- Active Microsoft Sentinel workspace
- Permissions: Microsoft Sentinel Reader (minimum)
- Connected Data Sources:
  - Azure AD Sign-in Logs
  - Security Events
  - Office 365 Logs
  - Azure Activity Logs
- Basic KQL knowledge

### 2. Data Sources Verification
```kql
// Check what data sources are available
union withsource=TableName *
| where TimeGenerated > ago(1d)
| summarize Count=count() by TableName
| sort by Count desc
```

### 3. Connectivity Testing
```kql
// Test for SigninLogs
SigninLogs
| where TimeGenerated > ago(1h)
| take 10

// Test for SecurityAlert
SecurityAlert
| where TimeGenerated > ago(24h)
| take 5
```

---

## 🏗️ Workbook Structure {#workbook-structure}

### Architecture Overview
```
📊 Advanced User Investigation Workbook
├── 🔍 Section 1: User Search & Selection
├── 👤 Section 2: User Profile & Overview
├── 🖥️  Section 3: Device & Location Analysis
├── 🚨 Section 4: Security Alerts & Incidents
├── 📈 Section 5: Risk Scoring & Analytics
├── ⏰ Section 6: Timeline & Behavioral Analysis
├── 🌍 Section 7: Geo-Location Intelligence
└── 📋 Section 8: Executive Summary & Export
```

---

## 🛠️ Step-by-Step Implementation {#implementation}

### Step 1: Creating the Workbook

1. **Navigate to Sentinel**
   - Go to Azure Portal
   - Select Microsoft Sentinel
   - Navigate to Workbooks
   - Click "+ New"

2. **Create Global Parameters**
   - Create a Text parameter named "UserSearchParameter" with label "🔍 Search User"
   - Create a Time Range parameter named "TimeRangeParameter" with label "📅 Time Range" defaulting to "last 30 days"
   - Create a Dropdown parameter named "DeviceParameter" with label "🖥️ Select Device"

### Step 2: Section 1 - User Search & Selection

**Purpose**: Allow users to search for and select specific users for investigation

**Instructions**:
1. Add a new query section
2. Set visualization to "Table"
3. Use the following query to search and display users:

```kql
// User search query
let UserSearch = "{UserSearchParameter}";
let TimeRange = {TimeRangeParameter};
SigninLogs
| where TimeGenerated between (TimeRange)
| where isnotempty(UserSearch)
| where UserPrincipalName contains UserSearch 
    or DisplayName contains UserSearch
    or UserDisplayName contains UserSearch
| extend UserInfo = strcat("👤 ", UserDisplayName, " (", UserPrincipalName, ")")
| summarize 
    TotalLogins = count(),
    UniqueDevices = dcount(DeviceDetail),
    UniqueIPs = dcount(IPAddress),
    UniqueLocations = dcount(strcat(LocationDetails.city, ", ", LocationDetails.countryOrRegion)),
    FirstSeen = min(TimeGenerated),
    LastSeen = max(TimeGenerated),
    RiskEvents = countif(RiskLevelDuringSignIn != "none")
    by UserPrincipalName, UserDisplayName, UserInfo
| extend DaysActive = datetime_diff('day', LastSeen, FirstSeen)
| project-reorder UserInfo, TotalLogins, UniqueDevices, UniqueIPs, UniqueLocations, RiskEvents, DaysActive, FirstSeen, LastSeen
| sort by TotalLogins desc
```

4. Configure the table to be clickable and create a parameter "SelectedUserParameter" from the UserPrincipalName column

### Step 3: Section 2 - User Profile & Overview

**Purpose**: Display comprehensive user profile information and statistics

**Instructions**:
1. Add a new query section
2. Set visualization to "Tiles" or "Table"
3. Use this query for detailed user profiling:

```kql
// Detailed user profile
let SelectedUser = "{SelectedUserParameter}";
let TimeRange = {TimeRangeParameter};
SigninLogs
| where TimeGenerated between (TimeRange)
| where UserPrincipalName == SelectedUser
| extend 
    GeoInfo = parse_json(LocationDetails),
    DeviceInfo = parse_json(DeviceDetail),
    AppInfo = parse_json(AppDisplayName)
| extend
    Country = tostring(GeoInfo.countryOrRegion),
    City = tostring(GeoInfo.city),
    DeviceOS = tostring(DeviceInfo.operatingSystem),
    Browser = tostring(DeviceInfo.browser)
| summarize
    // General statistics
    TotalSignIns = count(),
    SuccessfulSignIns = countif(ResultType == 0),
    FailedSignIns = countif(ResultType != 0),
    
    // Device information
    UniqueDevices = dcount(DeviceId),
    PrimaryOS = take_any(DeviceOS),
    PrimaryBrowser = take_any(Browser),
    
    // Geographic information
    Countries = make_set(Country, 10),
    Cities = make_set(City, 20),
    
    // Application information
    Applications = make_set(AppDisplayName, 15),
    
    // Risk information
    HighRiskSignIns = countif(RiskLevelDuringSignIn == "high"),
    MediumRiskSignIns = countif(RiskLevelDuringSignIn == "medium"),
    
    // Timeline
    FirstActivity = min(TimeGenerated),
    LastActivity = max(TimeGenerated)
    
by UserPrincipalName, UserDisplayName
| extend 
    SuccessRate = round((SuccessfulSignIns * 100.0) / TotalSignIns, 2),
    RiskScore = (HighRiskSignIns * 10 + MediumRiskSignIns * 5),
    ActiveDays = datetime_diff('day', LastActivity, FirstActivity)
```

### Step 4: Section 3 - Device & Location Analysis

**Purpose**: Analyze user's device usage patterns and geographic locations

**Instructions**:
1. Add a new query section
2. Set visualization to "Table"
3. Implement the device and location analysis:

```kql
// Detailed device and location analysis
let SelectedUser = "{SelectedUserParameter}";
let TimeRange = {TimeRangeParameter};
SigninLogs
| where TimeGenerated between (TimeRange)
| where UserPrincipalName == SelectedUser
| extend 
    GeoInfo = parse_json(LocationDetails),
    DeviceInfo = parse_json(DeviceDetail)
| extend
    Country = tostring(GeoInfo.countryOrRegion),
    State = tostring(GeoInfo.state),
    City = tostring(GeoInfo.city),
    Latitude = toreal(GeoInfo.geoCoordinates.latitude),
    Longitude = toreal(GeoInfo.geoCoordinates.longitude),
    DeviceOS = tostring(DeviceInfo.operatingSystem),
    Browser = tostring(DeviceInfo.browser),
    DeviceName = tostring(DeviceInfo.displayName)
| project 
    TimeGenerated,
    IPAddress,
    Country,
    State, 
    City,
    Latitude,
    Longitude,
    DeviceId,
    DeviceName,
    DeviceOS,
    Browser,
    AppDisplayName,
    RiskLevelDuringSignIn,
    ResultType
| extend
    Location = strcat(City, ", ", State, ", ", Country),
    DeviceInfo = strcat(DeviceName, " (", DeviceOS, " - ", Browser, ")"),
    Status = iff(ResultType == 0, "✅ Success", "❌ Failed"),
    RiskIcon = case(
        RiskLevelDuringSignIn == "high", "🔴",
        RiskLevelDuringSignIn == "medium", "🟡",
        RiskLevelDuringSignIn == "low", "🟢",
        "⚪"
    )
| project-reorder TimeGenerated, Status, RiskIcon, Location, IPAddress, DeviceInfo, AppDisplayName
| sort by TimeGenerated desc
```

### Step 5: Section 4 - Security Alerts & Incidents

**Purpose**: Correlate user activity with security alerts and incidents

**Instructions**:
1. Add a new query section
2. Set visualization to "Table"
3. Implement security alert correlation:

```kql
// Correlation with security alerts
let SelectedUser = "{SelectedUserParameter}";
let TimeRange = {TimeRangeParameter};
let UserIdentities = SigninLogs
    | where UserPrincipalName == SelectedUser
    | distinct IPAddress, DeviceId;
let UserIPs = toscalar(UserIdentities | summarize make_set(IPAddress));
let UserDevices = toscalar(UserIdentities | summarize make_set(DeviceId));
SecurityAlert
| where TimeGenerated between (TimeRange)
| where 
    Entities has SelectedUser
    or ExtendedProperties has SelectedUser
    or (Entities has_any (UserIPs))
    or (Entities has_any (UserDevices))
| extend 
    SeverityIcon = case(
        AlertSeverity == "High", "🔴",
        AlertSeverity == "Medium", "🟡",
        AlertSeverity == "Low", "🟢",
        AlertSeverity == "Informational", "🔵",
        "⚪"
    ),
    StatusIcon = case(
        Status == "New", "🆕",
        Status == "InProgress", "⏳",
        Status == "Resolved", "✅",
        Status == "Dismissed", "❌",
        "❓"
    )
| project 
    TimeGenerated,
    SeverityIcon,
    StatusIcon,
    AlertName,
    Description,
    RemediationSteps,
    CompromisedEntity,
    AttackKillChainIntent,
    Tactics,
    Techniques
| sort by TimeGenerated desc
```

### Step 6: Section 5 - Risk Scoring & Analytics

**Purpose**: Implement advanced risk scoring algorithm based on multiple factors

**Instructions**:
1. Add a new query section
2. Set visualization to "Table" with conditional formatting
3. Implement the risk scoring algorithm:

```kql
// Complex risk scoring algorithm
let SelectedUser = "{SelectedUserParameter}";
let TimeRange = {TimeRangeParameter};
let BaselineData = SigninLogs
    | where TimeGenerated between (ago(90d) .. ago(30d))
    | where UserPrincipalName == SelectedUser
    | extend GeoInfo = parse_json(LocationDetails)
    | extend Country = tostring(GeoInfo.countryOrRegion)
    | summarize 
        BaselineCountries = make_set(Country),
        BaselineDevices = make_set(DeviceId),
        AvgDailyLogins = count() / 60.0;
SigninLogs
| where TimeGenerated between (TimeRange)
| where UserPrincipalName == SelectedUser
| extend 
    GeoInfo = parse_json(LocationDetails),
    DeviceInfo = parse_json(DeviceDetail)
| extend
    Country = tostring(GeoInfo.countryOrRegion),
    Hour = hourofday(TimeGenerated),
    DayOfWeek = dayofweek(TimeGenerated)
| extend BaselineData = toscalar(BaselineData | take 1)
| extend
    // Risk Factors
    NewCountryRisk = iff(Country !in (BaselineData.BaselineCountries), 25, 0),
    NewDeviceRisk = iff(DeviceId !in (BaselineData.BaselineDevices), 20, 0),
    OffHoursRisk = iff(Hour < 6 or Hour > 22, 15, 0),
    WeekendRisk = iff(DayOfWeek == 0 or DayOfWeek == 6, 10, 0),
    FailedLoginRisk = iff(ResultType != 0, 30, 0),
    HighRiskLocationRisk = case(
        RiskLevelDuringSignIn == "high", 50,
        RiskLevelDuringSignIn == "medium", 25,
        0
    )
| extend 
    TotalRiskScore = NewCountryRisk + NewDeviceRisk + OffHoursRisk + WeekendRisk + FailedLoginRisk + HighRiskLocationRisk
| extend
    RiskLevel = case(
        TotalRiskScore >= 80, "🔴 Critical",
        TotalRiskScore >= 60, "🟠 High", 
        TotalRiskScore >= 40, "🟡 Medium",
        TotalRiskScore >= 20, "🟢 Low",
        "⚪ Minimal"
    )
| project 
    TimeGenerated,
    RiskLevel,
    TotalRiskScore,
    Country,
    NewCountryRisk,
    NewDeviceRisk,
    OffHoursRisk,
    WeekendRisk,
    FailedLoginRisk,
    HighRiskLocationRisk,
    IPAddress,
    DeviceId
| sort by TotalRiskScore desc, TimeGenerated desc
```

### Step 7: Section 6 - Timeline & Behavioral Analysis

**Purpose**: Create a behavioral timeline with impossible travel detection

**Instructions**:
1. Add a new query section
2. Set visualization to "Table" or "Time Chart"
3. Implement behavioral analysis:

```kql
// Advanced behavioral timeline
let SelectedUser = "{SelectedUserParameter}";
let TimeRange = {TimeRangeParameter};
SigninLogs
| where TimeGenerated between (TimeRange)
| where UserPrincipalName == SelectedUser
| extend 
    GeoInfo = parse_json(LocationDetails),
    Hour = hourofday(TimeGenerated),
    DayOfWeek = dayofweek(TimeGenerated)
| extend
    Country = tostring(GeoInfo.countryOrRegion),
    City = tostring(GeoInfo.city)
| sort by TimeGenerated asc
| extend 
    PrevLogTime = prev(TimeGenerated),
    PrevCountry = prev(Country),
    PrevCity = prev(City)
| extend
    TimeBetweenLogins = datetime_diff('minute', TimeGenerated, PrevLogTime),
    LocationChanged = iff(Country != PrevCountry or City != PrevCity, "🌍 Location Change", "📍 Same Location"),
    ImpossibleTravel = iff(
        Country != PrevCountry and TimeBetweenLogins < 60 and isnotempty(PrevCountry), 
        "⚠️ Impossible Travel", 
        ""
    )
| extend
    ActivityPattern = case(
        Hour >= 6 and Hour <= 9, "🌅 Morning",
        Hour >= 9 and Hour <= 12, "☀️ Late Morning", 
        Hour >= 12 and Hour <= 17, "🏢 Afternoon",
        Hour >= 17 and Hour <= 22, "🌆 Evening",
        "🌙 Night"
    ),
    DayType = case(
        DayOfWeek == 1, "Monday",
        DayOfWeek == 2, "Tuesday", 
        DayOfWeek == 3, "Wednesday",
        DayOfWeek == 4, "Thursday",
        DayOfWeek == 5, "Friday",
        DayOfWeek == 6, "Saturday",
        "Sunday"
    )
| project 
    TimeGenerated,
    ActivityPattern,
    DayType,
    LocationChanged,
    ImpossibleTravel,
    Country,
    City,
    AppDisplayName,
    IPAddress,
    TimeBetweenLogins,
    ResultType
| extend Status = iff(ResultType == 0, "✅", "❌")
| project-reorder TimeGenerated, Status, ActivityPattern, LocationChanged, ImpossibleTravel, Country, City, AppDisplayName
```

### Step 8: Section 7 - Geo-Location Intelligence

**Purpose**: Provide geographic intelligence and mapping capabilities

**Instructions**:
1. Add a new query section
2. Set visualization to "Map" or "Table"
3. For map visualization, configure latitude and longitude columns
4. Implement geographic intelligence:

```kql
// Advanced geographic intelligence
let SelectedUser = "{SelectedUserParameter}";
let TimeRange = {TimeRangeParameter};
SigninLogs
| where TimeGenerated between (TimeRange)
| where UserPrincipalName == SelectedUser
| extend GeoInfo = parse_json(LocationDetails)
| extend
    Country = tostring(GeoInfo.countryOrRegion),
    State = tostring(GeoInfo.state),
    City = tostring(GeoInfo.city),
    Latitude = toreal(GeoInfo.geoCoordinates.latitude),
    Longitude = toreal(GeoInfo.geoCoordinates.longitude)
| where isnotempty(Country)
| summarize 
    LoginCount = count(),
    UniqueIPs = dcount(IPAddress),
    FirstSeen = min(TimeGenerated),
    LastSeen = max(TimeGenerated),
    SuccessRate = round((countif(ResultType == 0) * 100.0) / count(), 2),
    RiskEvents = countif(RiskLevelDuringSignIn in ("high", "medium")),
    Applications = make_set(AppDisplayName, 5),
    SampleLatitude = take_any(Latitude),
    SampleLongitude = take_any(Longitude)
    by Country, State, City
| extend 
    Location = strcat(City, ", ", State, ", ", Country),
    RiskFlag = iff(RiskEvents > 0, "🚨", "✅"),
    PopularApps = strcat_array(Applications, ", ")
| project-reorder 
    RiskFlag,
    Location, 
    LoginCount, 
    UniqueIPs, 
    SuccessRate,
    RiskEvents,
    PopularApps,
    FirstSeen, 
    LastSeen,
    SampleLatitude,
    SampleLongitude
| sort by LoginCount desc
```

---

## 📊 Visualizations and Dashboards {#visualizations}

### 1. Visualization Configuration Guidelines

#### For Geographic Maps:
- Set latitude column to "SampleLatitude"
- Set longitude column to "SampleLongitude"
- Use "LoginCount" for bubble size
- Use "RiskEvents" for color coding
- Enable legend at bottom position

#### For Timeline Charts:
- Set X-axis to "TimeGenerated"
- Use "LoginCount" and "RiskScore" for Y-axes
- Split by "Country" or "RiskLevel"
- Enable drill-down capabilities

#### For Risk Heatmaps:
- Set X-axis to "DayOfWeek"
- Set Y-axis to "Hour"
- Use "RiskScore" for cell values
- Apply red color scheme for risk visualization

### 2. Dashboard Layout Recommendations

```
┌─────────────────────────────────────────────────┐
│  🔍 User Search & Quick Stats                   │
├─────────────────┬───────────────────────────────┤
│  👤 User Profile │  📊 Risk Score & Trends      │
├─────────────────┼───────────────────────────────┤
│  🌍 Geographic   │  📅 Timeline Analysis        │
│     Map          │                               │
├─────────────────┴───────────────────────────────┤
│  🚨 Security Alerts & Incidents                 │
├─────────────────────────────────────────────────┤
│  📋 Detailed Activity Log                       │
└─────────────────────────────────────────────────┘
```

---

## 🤖 Automation and Alerting {#automation}

### 1. Automated Alerting Setup

**Purpose**: Create automated alerts for suspicious user behaviors

**Instructions**:
1. Navigate to Analytics in Microsoft Sentinel
2. Create a new Scheduled Query Rule
3. Use this detection logic:

```kql
// Alert for suspicious behavior
let SuspiciousActivity = SigninLogs
| where TimeGenerated > ago(1h)
| extend GeoInfo = parse_json(LocationDetails)
| extend Country = tostring(GeoInfo.countryOrRegion)
| summarize 
    Countries = dcount(Country),
    FailedLogins = countif(ResultType != 0),
    HighRiskLogins = countif(RiskLevelDuringSignIn == "high")
    by UserPrincipalName
| extend AlertCondition = 
    Countries > 2 or 
    FailedLogins > 5 or 
    HighRiskLogins > 0;
SuspiciousActivity
| where AlertCondition == true
```

4. Configure alert frequency: Every 15 minutes
5. Set severity based on risk factors
6. Configure notification actions (email, Teams, etc.)

### 2. Incident Response Automation

**Instructions**:
1. Create Logic App for automated response
2. Trigger on high-risk user alerts
3. Automatically gather additional context
4. Notify security team with enriched information
5. Optionally disable user account for critical risks

---

## 🎯 Best Practices and Troubleshooting {#best-practices}

### ✅ Best Practices

#### 1. Performance Optimization
- Always filter on TimeGenerated first in queries
- Use specific time ranges instead of large historical periods
- Limit summarize operations to necessary fields only
- Use "take" or "limit" for large datasets in testing
- Implement early filtering before complex operations

Example of optimized query structure:
```kql
// Good performance pattern
SigninLogs
| where TimeGenerated > ago(30d)        // Time filter first
| where UserPrincipalName == "user@domain.com"  // User filter second
| summarize count() by Country          // Summarize only needed fields
| limit 100                            // Limit results if needed
```

#### 2. Error Handling and Data Validation
- Always check if data exists before complex operations
- Handle cases where users have no activity
- Validate parameters before using them in queries
- Use conditional logic for optional data sources

Example error handling:
```kql
// Check if user exists before processing
let UserExists = toscalar(
    SigninLogs 
    | where UserPrincipalName == "{User}"
    | summarize count()
);
// Only process if data exists
SigninLogs
| where UserPrincipalName == "{User}" and UserExists > 0
| // ... rest of query
```

#### 3. Resource Management
- Limit historical data queries to 90 days maximum
- Use materialized views for frequently accessed data
- Implement caching for common parameter combinations
- Monitor KQL compute unit consumption regularly
- Schedule data retention policies appropriately

#### 4. Security Considerations
- Implement proper RBAC for workbook access
- Mask sensitive information in visualizations
- Audit workbook usage and modifications
- Use parameterized queries to prevent injection
- Implement data classification labels

### ❌ Common Issues & Solutions

#### Issue 1: Query Timeouts
**Problem**: Queries take too long or timeout
**Solutions**:
- Reduce time range scope (try 7 days instead of 30)
- Add more specific filters early in the query
- Break complex queries into smaller parts
- Use summarize instead of distinct when possible
- Consider using materialized views for large datasets

#### Issue 2: Missing or Incomplete Data
**Problem**: Expected data doesn't appear in results
**Solutions**:
- Verify data connector health and configuration
- Check table permissions and access rights
- Validate time zone settings in parameters
- Confirm data retention policies
- Test with broader time ranges

#### Issue 3: Performance Degradation
**Problem**: Workbook loads slowly or becomes unresponsive
**Solutions**:
- Optimize KQL queries using performance best practices
- Reduce number of concurrent visualizations
- Implement query result caching
- Use conditional loading for optional sections
- Monitor workspace capacity and scaling

#### Issue 4: Visualization Problems
**Problem**: Charts or maps don't display correctly
**Solutions**:
- Verify column names match visualization requirements
- Check data types for geographic coordinates
- Ensure sufficient data points for meaningful visualization
- Validate color scheme and formatting options
- Test with sample data first

### 🔧 Advanced Troubleshooting

#### Debug Mode Implementation
Add this debug section to troubleshoot issues:

```kql
// Comprehensive debugging query
print 
    WorkbookVersion = "2.0",
    QueryExecutionTime = now(),
    UserParameter = "{UserSearchParameter}",
    TimeRangeStart = "{TimeRangeParameter:start}",
    TimeRangeEnd = "{TimeRangeParameter:end}",
    SelectedUser = "{SelectedUserParameter}",
    AvailableTables = "SigninLogs, SecurityAlert, AuditLogs"
| extend ParameterValidation = case(
    isempty("{UserSearchParameter}"), "❌ User search parameter is empty",
    isempty("{SelectedUserParameter}"), "⚠️ No user selected",
    "✅ Parameters look good"
)
```

#### Performance Monitoring
Monitor workbook performance with this query:

```kql
// Workbook performance monitoring
Usage
| where TimeGenerated > ago(24h)
| where DataType == "KQLCommand"
| where Resource contains "workbook"
| summarize 
    QueryCount = count(),
    AvgDurationSeconds = avg(Quantity),
    MaxDurationSeconds = max(Quantity),
    TotalComputeUnits = sum(Quantity * BillableQuantity)
    by bin(TimeGenerated, 1h)
| render timechart
```

---

## 📚 Additional Resources and Learning Path

### 🔗 Essential Documentation Links
- Microsoft Sentinel KQL Reference Documentation
- Azure Monitor Workbooks Documentation
- KQL Query Best Practices Guide
- Microsoft Sentinel Community Repository
- Threat Hunting with KQL Tutorial Series

### 📖 Recommended Learning Path

#### Beginner Level (Week 1-2):
1. **KQL Fundamentals**
   - Basic query structure and syntax
   - Common operators (where, summarize, project)
   - Time-based filtering and aggregations
   - String manipulation and parsing functions

2. **Sentinel Basics**
   - Data connector configuration
   - Understanding log schemas
   - Basic workbook creation
   - Parameter usage and types

#### Intermediate Level (Week 3-4):
1. **Advanced KQL Concepts**
   - Complex joins and unions
   - Time series analysis functions
   - Regular expressions and advanced parsing
   - Dynamic data type handling

2. **Security Investigation Techniques**
   - User behavior analytics
   - Threat hunting methodologies
   - IOC correlation and enrichment
   - Timeline reconstruction methods

#### Advanced Level (Week 5-8):
1. **Automation and Integration**
   - Logic Apps integration for response
   - Custom functions and stored procedures
   - API integration for external data
   - Machine learning integration in KQL

2. **Enterprise Implementation**
   - Performance optimization at scale
   - Multi-tenant considerations
   - Compliance and audit requirements
   - Custom connector development

### 🛠️ Hands-on Practice Exercises

#### Exercise 1: Basic User Investigation
- Search for a specific user across all data sources
- Identify their most common login locations
- Calculate their typical working hours
- Find any failed login attempts

#### Exercise 2: Risk Assessment
- Implement a custom risk scoring algorithm
- Identify users with unusual geographic patterns
- Detect impossible travel scenarios
- Create risk-based user classifications

#### Exercise 3: Incident Response
- Correlate user activity with security alerts
- Build a timeline of suspicious events
- Identify impacted resources and data
- Generate executive summary reports

---

## 🎉 Implementation Checklist and Success Metrics

### ✅ Pre-Implementation Checklist
- [ ] Sentinel workspace properly configured
- [ ] All required data sources connected and ingesting
- [ ] Appropriate permissions assigned to workbook users
- [ ] Test queries validated with sample data
- [ ] Performance benchmarks established
- [ ] Backup and version control processes in place

### ✅ Post-Implementation Validation
- [ ] All workbook sections load without errors
- [ ] Parameters function correctly across all sections
- [ ] Visualizations display meaningful data
- [ ] Performance meets acceptable thresholds
- [ ] Security team trained on workbook usage
- [ ] Documentation and runbooks created

### 📊 Success Metrics to Track
- **Investigation Speed**: Time to complete user investigations (target: <15 minutes)
- **Detection Accuracy**: Percentage of true positive risk identifications (target: >85%)
- **User Adoption**: Number of team members actively using workbook (target: 100%)
- **Query Performance**: Average query execution time (target: <30 seconds)
- **Coverage**: Percentage of user accounts regularly monitored (target: 100%)

### 🚀 Next Steps and Advanced Features
1. **Expand Data Sources**: Integrate additional log sources for comprehensive visibility
2. **Machine Learning**: Implement ML-based anomaly detection for user behavior
3. **Automated Response**: Build automated remediation workflows
4. **Executive Dashboards**: Create high-level summary views for management
5. **Compliance Reporting**: Add regulatory compliance monitoring and reporting
6. **Threat Intelligence**: Integrate external threat feeds for enhanced context

This comprehensive workbook will transform your security investigations from reactive, time-consuming processes into proactive, efficient operations. The key to success is continuous refinement based on your specific environment and emerging threats.

**Remember**: Start with the basic implementation, validate each section thoroughly, and gradually add advanced features as your team becomes comfortable with the platform. Good luck with your security investigations! 🚀🔒
