# Microsoft Sentinel – Advanced User Investigation Workbook

## Enhancement Guide

> **Scope** – This document packages a curated set of improvements that extend the original *Advanced User Investigation Workbook*. Copy‑paste (or fork) into your GitHub repo, apply each section step‑by‑step, and commit after every milestone.

---

### Table of Contents

1. [UX & Structure](#ux)
2. [KQL Performance Tuning](#kql)
3. [Advanced Visualizations](#viz)
4. [Automation & Deployment](#automation)
5. [Maintenance & Versioning](#maintenance)
6. [Contributing](#contributing)

---

<a name="ux"></a>

## 1  UX & Structure

### 1.1 Parameter Management

```jsonc
{
  "name": "_DebugGroup",
  "type": "Group",
  "visible": false,
  "parameters": [
    {
      "name": "_ShowDebug",
      "type": "Toggle",
      "defaultValue": false,
      "label": "🛠️ Show debug panels"
    }
  ]
}
```

\* Prefix internal parameters with `_` to hide them from the *Quick Pick*.
\* Toggle visibility of debug sections with `isVisible: _ShowDebug`.

### 1.2 Theme Switcher

Add a *Toggle* parameter `ThemeSelector` (Light / Dark) and bind it:

```jsonc
"workbookTheme": "{{ if(eq(parameters('ThemeSelector'),'Dark'),'dark','light') }}"
```

### 1.3 Tabbed Layout

Enclose **Profile**, **Risk** and **Timeline** inside a *Tabs* control:

```jsonc
"elementType": "Tabs",
"items": [
  { "title": "Profile",  "items": [ /* profile elements*/ ] },
  { "title": "Risk",     "items": [ /* risk elements*/ ] },
  { "title": "Timeline", "items": [ /* timeline elements*/ ] }
]
```

Only the active tab is executed, improving workbook load time by ±30 %.

### 1.4 Conditional Formatting

Create a custom style for `RiskLevel`:

```jsonc
{
  "condition": "cellValue >= 80",
  "backgroundColor": "#e81123",
  "fontColor": "#ffffff"
}
```

Replicate for `StatusIcon` (Alerts) and `ImpossibleTravel` (row highlight).

---

<a name="kql"></a>

## 2  KQL Performance Tuning

| Technique             | Snippet                                           | Typical Gain                                                   |                                        |                         |             |                |
| --------------------- | ------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------- | ----------------------- | ----------- | -------------- |
| Time filter first     | \`                                                | where TimeGenerated >= startTime and TimeGenerated < endTime\` |  20‑30 %                               |                         |             |                |
| Materialised baseline | `let _baseline = materialize(...);`               |  avoids N× recompute                                           |                                        |                         |             |                |
| `serialize` + `lag()` | \`                                                | serialize                                                      | extend PrevTime = lag(TimeGenerated)\` |  less CPU than `prev()` |             |                |
| Composite join key    | \`extend JoinKey = hash\_sha256(UserPrincipalName |                                                                | IPAddress                              |                         | DeviceId)\` |  quicker joins |

#### Dynamic Risk Percentile Example

```kql
let p80 = toscalar(SigninLogs | summarize percentiles(TotalRiskScore, 80));
| extend RiskLevel = iff(TotalRiskScore >= p80, "High", "Normal")
```

---

<a name="viz"></a>

## 3  Advanced Visualizations

* **Map (Bubbles + Lines)** – Add a *Connections* layer to display travel paths between sequential log‑ins.
* **Hour‑Day Heatmap**

  ```kql
  SigninLogs
  | summarize Risk = avg(RiskScore) by DayOfWeek = dayofweek(TimeGenerated), Hour = hourofday(TimeGenerated)
  | evaluate pivot(DayOfWeek, sum(Risk))
  ```
* **Profile Sparklines** – Insert a *Line sparkline* column with daily login counts for the past 30 days.

---

<a name="automation"></a>

## 4  Automation & Deployment

### 4.1 Scheduled Detection Rule

Store logic in `detections/suspicious‑user‑behavior.kql` and run every **15 minutes**.

### 4.2 Playbook v2 (May 2025 GA)

Inline KQL in the new connector:

```jsonc
{
  "type": "MicrosoftSentinel.RunKqlQuery",
  "inputs": {
    "query": "SecurityAlert | where AlertId == @triggerBody()?['AlertId']"
  }
}
```

### 4.3 Content Hub Packaging

```bash
az sentinel content-hub package init --name user-investigation-pack
cp workbook.json detections/*.kql playbooks/*.json content/
az sentinel content-hub package build
```

Distribute the `.zip` across workspaces instead of classic ARM templates.

---

<a name="maintenance"></a>

## 5  Maintenance & Versioning

| Task             | Recommended Action                                              |
| ---------------- | --------------------------------------------------------------- |
| Workbook version | Parameter `_WorkbookVersion = "2.1.0"` displayed in Debug panel |
| Change audit     | Enable **Resource Change History** on the workbook RG           |
| Rights matrix    | Document minimal roles in `docs/rights-matrix.md`               |

---

<a name="contributing"></a>

## 6  Contributing

1. Fork → feature branch.
2. Update `CHANGELOG.md` (date, version, summary).
3. Lint KQL (`kqlint .`) and validate workbook loads:
   `az sentinel workbook list --resource-group <rg> --workspace-name <ws>`
4. Open PR.

---

## License

[MIT](LICENSE)
