Below is a complete, copy-/-paste-ready Workbook recipe (in English) that turns the KQL you sent into an interactive report with

a Time range picker – drives the query start / end date

a Dropdown called AI Site with

“General” → shows everything

one item for every AI-related domain in your filter list (so you can look at a single tool)




---

1  Add the parameters

Parameter	Type	Name (internal)	What to enter in the UI

Time range	Time range	TimeRange	leave defaults (or tick Use dashboard time range if you prefer)
AI site	Dropdown	AIDrop	Source → Query  (paste the query below)


Query for the AIDrop dropdown

// ========== Build the list of AI domains ==========
let aiDomains = dynamic([
    "adcreative.ai","canva.com","chat.openai.com","chatgpt.com","claude.ai",
    "deepai.org","deepdreamgenerator.com","designs.ai","elevenlabs.io","gamma.app",
    "gemini.google.com","huggingface.co","ideogram.ai","invideo.io","openart.ai",
    "perplexity.ai","phind.com","play.ht","quillbot.com","replicate.com",
    "runwayml.com","stability.ai","stablediffusionweb.com","artbreeder.com",
    "vectorizer.ai","voicemod.net","audiogen.com","pika.art","synthesia.io",
    "heygen.com","agentgpt.reworkd.ai","auto-gpt.net","notion.so","jasper.ai",
    "copy.ai","scite.ai","elicit.org","mistral.ai","anthropic.com","cohere.ai",
    "runpod.io","scenario.com","leonardo.ai","pictory.ai","fliki.ai","descript.com",
    "replit.com","sourcegraph.com","codeium.com","consensus.app","scispace.com",
    "explainpaper.com","mem.ai","tome.app","taskade.com","browse.ai","durable.co",
    "magickpen.com"
]);
// ---------- Return one row per value + a “General” row ----------
datatable(AI:string) [ "General" ]
| union (mv-expand AI = aiDomains)
| order by AI

Tick Include default value and set it to General.
If you want multi-select, also tick Allow multiple selection (the main query below works for both single and multi).


---

2  Main query (paste into your workbook step)

// ==================================
// Parameters coming from the workbook
// ==================================
let StartTime = datetime({TimeRange:start});
let EndTime   = datetime({TimeRange:end});

// If the dropdown allows one value, you get a plain string.
// If “Allow multiple selection” is ON, you get a comma-separated list – convert to dynamic array
let SelAI_raw = '{AIDrop:value}';
let SelAI =
    iff(strcontains(SelAI_raw, ','), dynamic(split(SelAI_raw, ',')), SelAI_raw);

// =====================================
// Static list of AI-related URL domains
// =====================================
let aiDomains = dynamic([
    "adcreative.ai","canva.com","chat.openai.com","chatgpt.com","claude.ai",
    "deepai.org","deepdreamgenerator.com","designs.ai","elevenlabs.io","gamma.app",
    "gemini.google.com","huggingface.co","ideogram.ai","invideo.io","openart.ai",
    "perplexity.ai","phind.com","play.ht","quillbot.com","replicate.com",
    "runwayml.com","stability.ai","stablediffusionweb.com","artbreeder.com",
    "vectorizer.ai","voicemod.net","audiogen.com","pika.art","synthesia.io",
    "heygen.com","agentgpt.reworkd.ai","auto-gpt.net","notion.so","jasper.ai",
    "copy.ai","scite.ai","elicit.org","mistral.ai","anthropic.com","cohere.ai",
    "runpod.io","scenario.com","leonardo.ai","pictory.ai","fliki.ai","descript.com",
    "replit.com","sourcegraph.com","codeium.com","consensus.app","scispace.com",
    "explainpaper.com","mem.ai","tome.app","taskade.com","browse.ai","durable.co",
    "magickpen.com"
]);

// =============== Actual data =================
DeviceNetworkEvents
| where Timestamp between (StartTime .. EndTime)
| where RemoteUrl has_any(aiDomains)
| extend AISite = tostring(RemoteUrl)          // keep a copy for the result Grid
| where
      // ---------- Filtering logic ----------
      (
          // “General” selected (single-value mode)  – or present in the selection list (multi-select)
          SelAI == "General"
          or
          ("General" in (SelAI))
          or
          // Specific AI selected
          (isarray(SelAI) and RemoteUrl has_any(SelAI))    // multi-select
          or
          (isarray(SelAI) == false and RemoteUrl contains SelAI)  // single-select
      )
| project Timestamp, DeviceName, InitiatingProcessFileName,
          RemoteUrl, ReportId
| order by Timestamp desc

How the filter works

General (or nothing selected) → the where clause evaluates to true, so the query shows all rows that match one of the AI domains.

When one or several concrete domains are chosen, only events with a matching RemoteUrl survive.



---

3  Visualisation ideas

Start with a Grid to see raw rows.

Add a Bar chart → count() by AISite so you immediately see which AI tools are most popular.

Add a Time series → summarize count() by bin(Timestamp, 1h) to spot usage spikes.



---

Optional tweaks

Need	How

Maintain the domain list in one place	Move aiDomains into an Azure Function / saved parameter and call it from both queries.
Group by type (e.g., “Image”, “Chat”, “Video”)	Add a small lookup table and lookup / join it to tag events.
Keep a friendly label in the dropdown (“Claude (claude.ai)”)	Extend the aiDomains array to an array of objects [["claude.ai","Claude"], ...] and output both id and text columns from the parameter query.


That’s it – paste the snippets above into a Workbook, hit Save, and you’ll have an English-language, fully interactive report with the required parameters. If you run into any Workbook-specific UI quirks, just let me know!


xxxxxx

// ---------- build the array ----------
let aiDomains = dynamic([
    "adcreative.ai","canva.com","chat.openai.com","chatgpt.com","claude.ai",
    "deepai.org","deepdreamgenerator.com","designs.ai","elevenlabs.io","gamma.app",
    "gemini.google.com","huggingface.co","ideogram.ai","invideo.io","openart.ai",
    "perplexity.ai","phind.com","play.ht","quillbot.com","replicate.com",
    "runwayml.com","stability.ai","stablediffusionweb.com","artbreeder.com",
    "vectorizer.ai","voicemod.net","audiogen.com","pika.art","synthesia.io",
    "heygen.com","agentgpt.reworkd.ai","auto-gpt.net","notion.so","jasper.ai",
    "copy.ai","scite.ai","elicit.org","mistral.ai","anthropic.com","cohere.ai",
    "runpod.io","scenario.com","leonardo.ai","pictory.ai","fliki.ai","descript.com",
    "replit.com","sourcegraph.com","codeium.com","consensus.app","scispace.com",
    "explainpaper.com","mem.ai","tome.app","taskade.com","browse.ai","durable.co",
    "magickpen.com"
]);

// ---------- 1 row for “General” plus one row per domain ----------
print AI = "General"
| union (print AI = aiDomains)     // give mv-expand a table to work on
| mv-expand AI
| order by AI


xxxcxccccc

// 1️⃣  Static array with all AI domains
let aiDomains = dynamic([
    "adcreative.ai","canva.com","chat.openai.com","chatgpt.com","claude.ai",
    "deepai.org","deepdreamgenerator.com","designs.ai","elevenlabs.io","gamma.app",
    "gemini.google.com","huggingface.co","ideogram.ai","invideo.io","openart.ai",
    "perplexity.ai","phind.com","play.ht","quillbot.com","replicate.com",
    "runwayml.com","stability.ai","stablediffusionweb.com","artbreeder.com",
    "vectorizer.ai","voicemod.net","audiogen.com","pika.art","synthesia.io",
    "heygen.com","agentgpt.reworkd.ai","auto-gpt.net","notion.so","jasper.ai",
    "copy.ai","scite.ai","elicit.org","mistral.ai","anthropic.com","cohere.ai",
    "runpod.io","scenario.com","leonardo.ai","pictory.ai","fliki.ai","descript.com",
    "replit.com","sourcegraph.com","codeium.com","consensus.app","scispace.com",
    "explainpaper.com","mem.ai","tome.app","taskade.com","browse.ai","durable.co",
    "magickpen.com"
]);

// 2️⃣  Build a table that has ONE dynamic array column, then explode it
print Domains = aiDomains
| mv-expand AI = Domains       // every domain becomes its own row
| project AI
| union (datatable(AI:string) [ "General" ])   // add the “General” row
| order by AI

xxxxxxxx


// Static list of AI-related domains
let aiDomains = dynamic([
    "adcreative.ai","canva.com","chat.openai.com","chatgpt.com","claude.ai",
    "deepai.org","deepdreamgenerator.com","designs.ai","elevenlabs.io","gamma.app",
    "gemini.google.com","huggingface.co","ideogram.ai","invideo.io","openart.ai",
    "perplexity.ai","phind.com","play.ht","quillbot.com","replicate.com",
    "runwayml.com","stability.ai","stablediffusionweb.com","artbreeder.com",
    "vectorizer.ai","voicemod.net","audiogen.com","pika.art","synthesia.io",
    "heygen.com","agentgpt.reworkd.ai","auto-gpt.net","notion.so","jasper.ai",
    "copy.ai","scite.ai","elicit.org","mistral.ai","anthropic.com","cohere.ai",
    "runpod.io","scenario.com","leonardo.ai","pictory.ai","fliki.ai","descript.com",
    "replit.com","sourcegraph.com","codeium.com","consensus.app","scispace.com",
    "explainpaper.com","mem.ai","tome.app","taskade.com","browse.ai","durable.co",
    "magickpen.com"
]);

// 1 row = “General”, plus one row per domain
datatable (AI:string) [ "General" ]       // <-- keeps the column name AI
| union (print AI = aiDomains
         | mv-expand AI)                 // explode the array into rows
| sort by AI


xxxxx

// ------------- STATIC LIST -------------
let aiDomains = dynamic([
    "adcreative.ai","agentgpt.reworkd.ai","anthropic.com","artbreeder.com",
    "audiogen.com","auto-gpt.net","browse.ai","canva.com","chat.openai.com",
    "chatgpt.com","claude.ai","codeium.com","cohere.ai","consensus.app",
    "copy.ai","deepai.org","deepdreamgenerator.com","descript.com","designs.ai",
    "durable.co","elevenlabs.io","elicit.org","explainpaper.com","fliki.ai",
    "gamma.app","gemini.google.com","huggingface.co","ideogram.ai","invideo.io",
    "jasper.ai","leonardo.ai","magickpen.com","mem.ai","mistral.ai","notion.so",
    "openart.ai","perplexity.ai","pictory.ai","phind.com","pika.art","play.ht",
    "quillbot.com","replit.com","replicate.com","runpod.io","runwayml.com",
    "scispace.com","scite.ai","scenario.com","sourcegraph.com","stability.ai",
    "stablediffusionweb.com","synthesia.io","taskade.com","tome.app","vectorizer.ai",
    "voicemod.net","durable.co"
]);

// ------------- ONE ROW PER VALUE -------------
print DomainList = aiDomains
| mv-expand AI = DomainList                 // explode array → rows
| project AI = tostring(AI)                 // ensure the column is string
| union (datatable (AI:string) [ "General" ])   // add the "General" row
| project AI                                // keep only the dropdown column
| order by AI asc                           // alphabetical for nice UX