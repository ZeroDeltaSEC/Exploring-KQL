Got itâ€”here are ready-to-run Microsoft 365 Defender (Advanced Hunting) KQL examples for detecting password spray. Tweak the thresholds to match your environment.

Cloud sign-ins (Entra ID / Azure AD)

// Password spray via Entra ID sign-ins (Azure AD)
// Looks for many failed attempts from the same IP against many different users in short time buckets
let window      = 30m;
let bucket      = 5m;
let minFailures = 20;
let minUsers    = 10;
// Common "wrong password / bad creds" result codes
let badPwdCodes = dynamic(["50053","50055","50126","50034"]);
AADSignInEventsBeta
| where Timestamp > ago(window)
| where ResultType in (badPwdCodes)
| extend SrcIP = tostring(IPAddress)
| where SrcIP !in ("127.0.0.1","::1")
      and SrcIP !startswith "10."
      and SrcIP !startswith "192.168."
      and SrcIP !startswith "172.16."
| summarize Failed=count(),
            Users=dcount(UserPrincipalName),
            UserSet=make_set(UserPrincipalName, 100),
            Apps=make_set(AppDisplayName, 50)
          by SrcIP, bin(Timestamp, bucket)
| where Failed >= minFailures and Users >= minUsers
| order by Failed desc, Users desc

Identity (cloud/hybrid) logons

// Password spray across identity logons (cloud/hybrid signals)
let window      = 30m;
let bucket      = 5m;
let minFailures = 30;
let minUsers    = 12;
IdentityLogonEvents
| where Timestamp > ago(window)
| where ActionType == "LogonFailed"
| extend SrcIP = coalesce(RemoteIP, IPAddress, "")
| where SrcIP != "" and SrcIP !in ("127.0.0.1","::1")
      and SrcIP !startswith "10."
      and SrcIP !startswith "192.168."
      and SrcIP !startswith "172.16."
| summarize Failed=count(),
            Users=dcount(AccountUpn),
            UserSet=make_set(AccountUpn, 100),
            Targets=make_set(DeviceName, 50),
            LogonTypes=make_set(LogonType, 10)
          by SrcIP, bin(Timestamp, bucket)
| where Failed >= minFailures and Users >= minUsers
| order by Failed desc

Endpoints (on-prem / RDP/SMB/etc.)

// Password spray attempted against endpoints
let window      = 30m;
let bucket      = 5m;
let minFailures = 40;
let minUsers    = 15;
DeviceLogonEvents
| where Timestamp > ago(window)
| where ActionType == "LogonFailed"
| extend SrcIP = tostring(RemoteIP)
| where isnotempty(SrcIP)
      and SrcIP !in ("127.0.0.1","::1")
      and SrcIP !startswith "10."
      and SrcIP !startswith "192.168."
      and SrcIP !startswith "172.16."
| summarize Failed=count(),
            Users=dcount(AccountName),
            UserSet=make_set(iif(isempty(AccountDomain), AccountName, strcat(AccountDomain, "\\", AccountName)), 100),
            Targets=make_set(DeviceName, 50),
            LogonTypes=make_set(LogonType, 10)
          by SrcIP, bin(Timestamp, bucket)
| where Failed >= minFailures and Users >= minUsers
| order by Failed desc

Tips

Tighten/loosen minFailures, minUsers, and the bucket/window based on volume.

If you see benign scanners or IdP health checks, add an allowlist (IPs/CIDRs, app names, or user agents).

To focus strictly on wrong passwords, keep the bad password result codes and exclude conditional access/MFA blocks.


